---
title: "Natural Gas Planning"
author: "Joseph Welsh"
format: gfm
editor: visual
---

```{r setup, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}
library(tidyverse)
library(sf)
```


## Simulating data

Your writer used R's inbuilt distribution functions to simulate random x and y coordinates for different meter points.

```{r funcdef, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}

bbox_coords = c(-94, 30, -71, 42)

genPipelinePoints = 
  function(name, 
           x1, y1, x2, y2){

    xmin = x1
    ymin = y1
    xmax = x2
    ymax = y2
    
    #generate 15 random x coordinates for lines
    xcoords = runif(n = 25, 
          min = xmin, max = xmax)
    
    #generate 15 random y coordinates for lines
    ycoords = runif(n = 25, 
          min = ymin, max = ymax)
    
    df = 
      tibble(
        Pipeline = name,
        Meter = paste0(name, 1:25),
        lon = sort(xcoords),
        lat = sort(ycoords),
        supply = sample(c(0,20000, 50000), 
                        size = 25,
                        replace = T, 
                        prob = c(0.5,0.3,0.2)),
        demand = sample(c(0,20000, 100000), 
                        size = 25, 
                        replace = T, 
                        prob = c(0.6,0.3,0.1)),
        constraint = 80000,
        cost = rnorm(25, mean = 3, sd = 1)
      )
    return(df)
  }

```


```{r pipelines, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}
set.seed(9999)
pipelines = 
  tibble(
  Name = c("Sphinx", "Griffin", "Manticore", "Pegasus"), 
  xmin = rep(bbox_coords[1], times = 4),
  ymin = rep(bbox_coords[2], times = 4),
  xmax = rep(bbox_coords[3], times = 4),
  ymax = rep(bbox_coords[4], times = 4)
) %>% rowwise() %>% 
  mutate(data = 
           list(
             genPipelinePoints(Name,
                               x1 = xmin,
                               y1 = ymin,
                               x2 = xmax,
                               y2 = ymax)
             )) %>% 
  select(data) %>% 
  unnest(cols = data) %>% 
  mutate(ft1 = abs(-80 - lon),
         ft2 = abs(32 - lat),
         lat2 = lat,
         lon2 = lon) %>% 
  st_as_sf(coords = c('lon', 'lat'),
           crs=4326)

```


```{r crossing, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}
# create pipeline project that unifies 4 points
crossing = 
  pipelines %>% 
  group_by(Pipeline) %>% 
  slice_min(order_by=ft1,
            n=1) %>% 
  ungroup() %>% 
  mutate(Pipeline = "Crossing") %>% 
  arrange(lat2)

crossing_geom = 
  crossing %>% 
  summarize(geometry = st_combine(geometry)) %>% 
  mutate(Pipeline = "Crossing Project",
         .before = geometry) %>% st_cast("LINESTRING")


pipelines_geom = pipelines %>% 
  group_by(Pipeline) %>% 
  summarise(geometry = st_combine(geometry)) %>%
  st_cast("LINESTRING")

ggplot() +
  
  geom_sf(data = pipelines_geom,
          aes(color = Pipeline)) +
  geom_sf(data = pipelines, 
          aes(color = Pipeline)) +
  geom_sf(data = crossing_geom, linewidth=1.2,
          aes(color = Pipeline)) +
  ggtitle('Map of pipelines in the southeast of Mars') +
  scale_x_continuous(labels = 
                       scales::label_number(
                         accuracy = 1,
                         suffix = '°W'
                       )) +
  scale_y_continuous(labels = 
                       scales::label_number(
                         accuracy = 1,
                         suffix = '°N'
                       )) +
  theme_minimal()

 
```


```{r alternatives, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}

crossing_length = 
  crossing_geom %>% st_length() # meters

crossing_cost = as.numeric(crossing_length) * 2000

crossing_cost %>% scales::dollar()
```

```{r crossing_network, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}
network = 
  pipelines %>%
  bind_rows(crossing) %>%
  group_by(Pipeline) %>%
  mutate(From = Meter,
         To = lead(Meter),
         .before = Pipeline) %>%
  filter(!is.na(To))

crossingnetwork_c =  
  network %>% 
  select(From, To, constraint) %>%
  sf::st_drop_geometry() %>%
  pivot_wider(names_from = To,
              values_from = constraint) %>%
  mutate(
    across(everything(), ~replace_na(.x, 0))
  ) %>% 
  column_to_rownames(var = "From")

```


```{r network, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}

network_c = 
  network %>%
  select(From, To, constraint) %>%
  sf::st_drop_geometry() %>%
  pivot_wider(names_from = To,
              values_from = constraint) %>%
  mutate(
    across(everything(), ~replace_na(.x, 0))
  ) %>% 
  column_to_rownames(var = "From")

```

```{r supply_demand, echo=FALSE, warning=FALSE, error=FALSE,message=FALSE}

supply_c = 
  network %>% 
  select(From, supply) %>% st_drop_geometry() %>% 
  distinct(From, .keep_all = TRUE)

demand_c = 
  network %>% 
  select(To, demand) %>% st_drop_geometry() %>% 
  distinct(To, .keep_all = TRUE)

cost_c = 
  network %>% 
  select(From, To, cost) %>%
  sf::st_drop_geometry() %>%
  pivot_wider(names_from = To,
              values_from = cost) %>%
  mutate(
    across(everything(), ~replace_na(.x, 0))
  ) %>% 
  column_to_rownames(var = "From")
```


```{r}
library(ompr)

# network

# n_from = nrow(network_c)
# n_to = ncol(network_c)
# 
# MILPModel() %>% 
#   add_variable(flow[i,j], type = 'continuous', lb = 0,
#                i = 1:n_from, j = 1:n_to) %>% 
#   add_constraint(flow[i,j] <= network_c[i,j], 
#                  i = 1:n_from, j = 1:n_to) %>% 
#   add_constraint(sum_over(flow[i,j], j = 1:n_to) <= supply_c[i,2], 
#                  i = 1:n_from) %>% 
#   add_constraint(sum_over(flow[i,j], i = 1:n_from) == demand_c[j,2],
#                  j = 1:n_to) %>% 
#   set_objective(sum_over(flow[i,j] * cost_c[i,j], 
#                          j = 1:n_to, 
#                          i = 1:n_from),
#                 sense = 'min')



```


